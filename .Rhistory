library(rgeos)
library(ncdf4)
library(raster)
#input the map which contains the boundaries of countries
country = vect("/Users/zhangfengqi/Desktop/Crop Failure/WorldCountries.shp")
library(readxl)
library(raster)
library(rasterVis)
library(rgdal)
library(terra)
library(sp)
library(sf)
library(rgeos)
library(ncdf4)
#input the map which contains the boundaries of countries
country = vect("/Users/zhangfengqi/Desktop/Crop Failure/WorldCountries.shp")
View(hotspots)
library(readxl)
library(raster)
library(rasterVis)
library(rgdal)
library(terra)
library(sp)
library(sf)
library(rgeos)
library(ncdf4)
#input the map which contains the boundaries of countries
country = vect("/Users/zhangfengqi/Desktop/Crop Failure/WorldCountries.shp")
install.packages("metafor")
library(raster)
library(rasterVis)
library(ncdf4)
library(rgdal)
library(terra)
library(sp)
library(sf)
library(rgeos)
library(lattice)
library(scPDSI)
library(SPEI)
#input the map which contains the boundaries of countries
country = vect("/Users/zhangfengqi/Desktop/Crop Failure/WorldCountries.shp")
View(hotspots)
View(hotspots)
View(hotspots)
library(readxl)
library(raster)
library(rasterVis)
library(rgdal)
library(terra)
library(sp)
library(sf)
library(rgeos)
library(ncdf4)
library(ggplot2)
library(nortest)
HistDr = rast("/Users/zhangfengqi/Downloads/f8568e67-46e7-425d-b779-a8504971389b/f8568e67-46e7-425d-b779-a8504971389b/public/ASIS-HADF.png")
?rast
plot(HistDr)
HistDr
HistDr = rast("/Users/zhangfengqi/Downloads/rdria_m_wld_20220101_20221221_t/rdria_m_wld_20221221_t.tif")
plot(HistDr)
VectMap = as.polygons(HistDr)
plot(VectMap)
VectMap
VectMap = as.polygons(HistDr, trunc=TRUE, dissolve=TRUE, values=TRUE, na.rm=TRUE, na.all=FALSE, extent=FALSE)
VectMap
HistDr
RicePro = rast("/Users/zhangfengqi/Desktop/Crop Failure/Research/RiceAtlas/RiceProduction_v1/RiceProduction_v1.shp")
RiceCal = rast("/Users/zhangfengqi/Desktop/Crop Failure/Research/RiceAtlas/RiceCalender_v1/RiceCalender_v1.shp")
RiceCal = rast("/Users/zhangfengqi/Desktop/Crop Failure/Research/RiceAtlas/RiceCalendar_v1/RiceCalendar_v1.shp")
RicePro = vect("/Users/zhangfengqi/Desktop/Crop Failure/Research/RiceAtlas/RiceProduction_v1/RiceProduction_v1.shp")
plot(HistDr)
Admin = vect("/Users/zhangfengqi/Downloads/WB_Boundaries_GeoJSON_highres/WB_Admin0_boundary_lines.geojson")
?rgdal
install.packages("geojsonsf")
library(geojsonsf)
Admin = geojson_sf("/Users/zhangfengqi/Downloads/WB_Boundaries_GeoJSON_highres/WB_Admin0_boundary_lines.geojson")
Admin
plot(Admin)
Admin = geojson_sf("/Users/zhangfengqi/Downloads/gaul0_asap/gaul0_asap.shp")
Admin = vect("/Users/zhangfengqi/Downloads/gaul0_asap/gaul0_asap.shp")
plot(Admin)
Admin = vect("/Users/zhangfengqi/Downloads/gaul1_asap/gaul1_asap.shp")
plot(Admin)
DrRisk = rast("/Users/zhangfengqi/Downloads/rdria_m_wld_20220101_20221221_t/rdria_m_wld_20221221_t.tif")
RiskList = extract(DrRisk, Admin, fun = mean)
Admin$DrRisk = RiskList
RiskList
RiskList = extract(DrRisk, Admin, fun = mean, na.rm = T)
RiskList
RiskList = extract(DrRisk, Admin, method = 'simple', fun = mean, buffer = NULL, na.rm = T)
RiskList
Admin$DrRisk = RiskList$RDRI_1221
writeVector(Admin, "/Users/zhangfengqi/Downloads/DroughtRisk.shp")
install.packages("shiny")
install.packages("caret")
install.packages("easyPubMed")
?rnorm
hist(rnorm(10000, 0, 1))
pnorm(0.5, 0, 1)
qnorm(0.5, 0, 1)
dnorm(0, 0, 1)
dnorm(10, 0, 1)
library("EnvStats")
library("mc2d")
?runif
plot(x, punif(x, min = 0, max = 100), type = "l", main = "Uniform(0,100) CDF",
ylab = "F(x)", lwd = 2, col = "red")
# Grid of X-axis values
x <- seq(-20, 120, 0.01)
# Uniform distribution between 0 and 1
plot(x, punif(x, min = 0, max = 100), type = "l", main = "Uniform(0,100) CDF",
ylab = "F(x)", lwd = 2, col = "red")
?rtri
hist(rpert(n = 10000, min = 0, mode = 4, max = 100))
?sort
?plot
library("FinancialMath")
?rpois
Loss2030 = 62700000/108000
Loss2030
Revenue = 1300000000/108000
Revenue
Revenue = 320000000/108000
Revenue
FireLoss = Fire*Loss
#fire risk on agricultural land use
Fire = rtri(n, min = 0, mode = 0.26, max = 0.37)
n = 10000
#fire risk on agricultural land use
Fire = rtri(n, min = 0, mode = 0.26, max = 0.37)
#loss from fire in crop production
Loss = rtri(n, min = 0, mode = 580, max = 3000)
FireLoss = Fire*Loss
hist(FireLoss)
hist(FireLoss, main = "Fire Loss Distribution")
n = 10000
Cover = 500
for(k in 1:n){
#fire risk on agricultural land use
Fire = rtri(1, min = 0, mode = 0.26, max = 0.37)
#loss from fire in crop production
Loss = rtri(1, min = 0, mode = 580, max = 3000)
FireLoss = Fire*Loss
if(FireLoss<Cover){Comp[k] = FireLoss[k]}
if(FireLoss>=Cover){Comp[k] = Cover}
print(k)
}
n = 10000
Cover = 500
Comp = vector()
for(k in 1:n){
#fire risk on agricultural land use
Fire = rtri(1, min = 0, mode = 0.26, max = 0.37)
#loss from fire in crop production
Loss = rtri(1, min = 0, mode = 580, max = 3000)
FireLoss = Fire*Loss
if(FireLoss<Cover){Comp[k] = FireLoss[k]}
if(FireLoss>=Cover){Comp[k] = Cover}
print(k)
}
hist(Comp, main = "Fire Insurance Compensation")
Comp
min(Comp)
min(na.omit(Comp))
hist(na.omit(Comp), main = "Fire Insurance Compensation")
n = 1000
Cover = 1500
Comp = vector()
for(k in 1:n){
#fire risk on agricultural land use
Fire = rtri(1, min = 0, mode = 0.26, max = 0.37)
#loss from fire in crop production
Loss = rtri(1, min = 0, mode = 580, max = 3000)
FireLoss = Fire*Loss
if(FireLoss<Cover){Comp[k] = FireLoss[k]}
if(FireLoss>=Cover){Comp[k] = Cover}
print(k)
}
hist(Comp, main = "Fire Insurance Compensation")
Comp
na.omit(Comp)
n = 1000
Cover = 700
Comp = vector()
for(k in 1:n){
#fire risk on agricultural land use
Fire = rtri(1, min = 0, mode = 0.26, max = 0.37)
#loss from fire in crop production
Loss = rtri(1, min = 0, mode = 580, max = 3000)
FireLoss = Fire*Loss
if(FireLoss<Cover){Comp[k] = FireLoss}
if(FireLoss>=Cover){Comp[k] = Cover}
print(k)
}
n = 300
Cover = 700
Comp = vector()
for(k in 1:n){
#fire risk on agricultural land use
Fire = rtri(1, min = 0, mode = 0.26, max = 0.37)
#loss from fire in crop production
Loss = rtri(1, min = 0, mode = 580, max = 3000)
FireLoss = Fire*Loss
if(FireLoss<Cover){Comp[k] = FireLoss}
if(FireLoss>=Cover){Comp[k] = Cover}
print(k)
}
hist(Comp, main = "Fire Insurance Compensation")
n = 1000
n = 1000
Cover = 700
Comp = vector()
for(k in 1:n){
#fire risk on agricultural land use
Fire = rtri(1, min = 0, mode = 0.26, max = 0.37)
#loss from fire in crop production
Loss = rtri(1, min = 0, mode = 580, max = 3000)
FireLoss = Fire*Loss
if(FireLoss<Cover){Comp[k] = FireLoss}
if(FireLoss>=Cover){Comp[k] = Cover}
print(k)
}
hist(Comp, main = "Fire Insurance Compensation")
mean(Comp)
sum(Comp)
Premium = 100
for (k in 1:n)
{
#fire risk on agricultural land use
Fire = rtri(1, min = 0, mode = 0.26, max = 0.37)
#loss from fire in crop production
Loss = rtri(1, min = 0, mode = 580, max = 3000)
FireLoss = Fire*Loss
if(FireLoss<Cover){InsCost[k] = Premium}
if(FireLoss>=Cover){InsCost[k] = FireLoss - Cover + Premium}
print(k)
}
InsCost = vector()
for (k in 1:n)
{
#fire risk on agricultural land use
Fire = rtri(1, min = 0, mode = 0.26, max = 0.37)
#loss from fire in crop production
Loss = rtri(1, min = 0, mode = 580, max = 3000)
FireLoss = Fire*Loss
if(FireLoss<Cover){InsCost[k] = Premium}
if(FireLoss>=Cover){InsCost[k] = FireLoss - Cover + Premium}
print(k)
}
InsCost = vector()
FireLoss2 = vector()
for (k in 1:n)
{
#fire risk on agricultural land use
Fire = rtri(1, min = 0, mode = 0.26, max = 0.37)
#loss from fire in crop production
Loss = rtri(1, min = 0, mode = 580, max = 3000)
FireLoss2[k] = Fire*Loss
if(FireLoss2[k] < Cover){InsCost[k] = Premium}
if(FireLoss2[k] >= Cover){InsCost[k] = FireLoss2[k] - Cover + Premium}
print(k)
}
projectID <- c(rep("no insurance",n),rep("insurance",n))
costsCC <- c(FireLoss2,InsCost)
costsCCins <- data.frame(projectID,costsCC)
library(ggplot2)
ggplot(costsCCins, aes(x=costsCC, fill=projectID)) +
geom_histogram(position="identity", alpha=0.4)
plot(sort(FireLoss2), (1:length(FireLoss2))/length(FireLoss2), type="l", ylab = "F(x) ≡Pr[X ≤x]", xlab = "damage cost ($/ha)" )
lines(sort(InsCost), (1:length(InsCost))/length(InsCost), type="l", col = "blue")
legend("topleft", legend=c("no insurance", "insurance"),
col=c("black", "blue"), lty=c(1,1),bty = "n")
#set the working directory
setwd("~/Desktop/PopuHK")
library(rgdal)
library(sp)
library(sf)
library(terra)
#input the map which contains the boundaries of countries
Country = vect("/Users/zhangfengqi/Desktop/Crop Failure/WorldCountries/WorldCountriesWithISO.shp")
HKPopu = vect("./Projected Population by District Council District of Hong Kong 2021 to 2029.shp")
plot(HKPopu)
HKPopu
HKPopu = project(HKPopu, crs(Country))
plot(HKPopu)
HKPopu = rbind(HKPopu, HKPopu)
HKPopu
HKPopu = rbind(HKPopu, HKPopu, HKPopu, HKPopu, HKPopu)
HKPopu
HKPopu = vect("./Projected Population by District Council District of Hong Kong 2021 to 2029.shp")
HKPopu = project(HKPopu, crs(Country))
HKPopu1 = rbind(HKPopu, HKPopu, HKPopu, HKPopu, HKPopu, HKPopu, HKPopu, HKPopu, HKPopu)
HKPopu1
HKPopu1 = rbind(HKPopu, HKPopu, HKPopu, HKPopu, HKPopu, HKPopu, HKPopu, HKPopu, HKPopu, HKPopu, HKPopu)
HKPopu1
HKPopu1$Popu = c(HKPopu$F2019, HKPopu$F2020, HKPopu$F2021, HKPopu$F2022, HKPopu$F2023, HKPopu$F2024, HKPopu$F2025, HKPopu$F2026, HKPopu$F2027, HKPopu$F2028, HKPopu$F2029)
Year = vector()
Year = vector()
for (i in 2019: 2029)
{
YearTemp = rep(i, 18)
Year = c(Year, YearTemp)
}
Year
HKPopu1$Year = Year
HKPopu1
HKPopu2$District = HKPopu1$District_C
HKPopu2 = HKPopu1[,c('District_C', 'Popu', 'Year')]
HKPopu2
HKPopu2$Year = as.Date(HKPopu2$Year)
?as.Date
writeVector(HKPopu2, "./HKPopu2/HKPopu2.shp")
#set the working directory
setwd("~/Desktop/PopuHK")
library(rgdal)
library(sp)
library(sf)
library(terra)
#input the map which contains the boundaries of countries
Country = vect("/Users/zhangfengqi/Desktop/Crop Failure/WorldCountries/WorldCountriesWithISO.shp")
RiceProd = vect("/Users/zhangfengqi/Desktop/Crop Failure/Research/RiceAtlas/RiceProduction_v1/RiceProduction_v1.shp")
plot(RiceProd)
RiceProd = vect("/Users/zhangfengqi/Desktop/Crop Failure/Research/RiceAtlas/RiceProduction_v1/RiceProduction_v1.shp")
install.packages("/Users/zhangfengqi/Downloads/gurobi10.0.1_macos_universal2.pkg")
//Users//zhangfengqi//Downloads//gurobi10.0.1_macos_universal2.pkg
install.packages('gurobi')
require(gurobi)
install.packages("/Users/zhangfengqi/Downloads/gurobi10.0.1_macos_universal2.pkg", repos = NULL)
install.packages('<R-package-file>', repos=NULL)
install.packages('/Library/gurobi1001/macos_universal2/R/gurobi_10.0-1_R_4.2.0.tgz', repos=NULL)
install.packages('/Users/zhangfengqi/Library/gurobi1001/macos_universal2/R/gurobi_10.0-1_R_4.2.0.tgz', repos=NULL)
install.packages("/Users/zhangfengqi/Library/R/arm64/4.2/library/gurobi/R/gurobi", repos = NULL)
install.packages("/Users/zhangfengqi/Library/R/arm64/4.2/library/gurobi/R/gurobi")
install.packages("/Users/zhangfengqi/Library/R/arm64/4.2/library/gurobi/libs/gurobi.so")
install.packages("/Users/zhangfengqi/Library/R/arm64/4.2/library/gurobi/R/gurobi.rdb")
install.packages("/Users/zhangfengqi/Library/R/arm64/4.2/library/gurobi/R/gurobi.rdx")
install.packages("/Users/zhangfengqi/Library/R/arm64/4.2/library/gurobi/R/gurobi")
install.packages("/Users/zhangfengqi/Library/R/arm64/4.2/library/gurobi/R/gurobi", repos = NULL)
install.packages("/Users/zhangfengqi/Library/R/arm64/4.2/library/gurobi.zip", repos = NULL)
install.packages("/Users/zhangfengqi/Library/R/arm64/4.2/library/gurobi.zip")
install.packages("/Users/zhangfengqi/Library/R/arm64/4.2/library/gurobi")
install.packages("/Library/gurobi1001/macos_universal2")
install.packages("/Library/gurobi1001/macos_universal2", repos = NULL)
installdir
.libPaths
.libPaths()
library(gurobi)
install.packages('slam')
library(gurobi)
install.packages("/Library/gurobi1001/macos_universal2/R/gurobi_10.0-1_R_4.2.0.tgz")
library(rgeos)
library(raster)
library(sp)
library(rgdal)
library(sf)
library(terra)
library(dplyr)
install.packages("prioritizr")
library(prioritizr)
library(slam)
library(gurobi)
#DATA PREPARATION ##########################################################
# Read in world shapefile map
world = vect("world_countries_boundary_file_world_2002.shp")
#DATA PREPARATION ##########################################################
# Read in world shapefile map
world = vect("world_countries_boundary_file_world_2002.shp")
#DATA PREPARATION ##########################################################
# Read in world shapefile map
world = vect("world_countries_boundary_file_world_2002.shp")
#DATA PREPARATION ##########################################################
# Read in world shapefile map
world = vect("world_countries_boundary_file_world_2002.shp")
/Users/zhangfengqi/Desktop/NUS/BL5323/lecture 9/consPlanning/
#DATA PREPARATION ##########################################################
# Read in world shapefile map
world = vect("/Users/zhangfengqi/Desktop/NUS/BL5323/lecture 9/consPlanning/world_countries_boundary_file_world_2002.shp")
cambodia = world[world$NAME == "Cambodia"]
cambdefRisk <- rast("cambdefRisk.tiff")
cambCO2 <- rast("total_CO2.tiff")
library(rgeos)
library(raster)
library(rgdal)
library(sp)
library(sf)
library(terra)
library(dplyr)
cambdefRisk <- rast("cambdefRisk.tiff")
library(rgdal)
library(sp)
library(sf)
library(terra)
#set the working directory
setwd("/Users/zhangfengqi/Desktop/NUS/BL5323/FinalProject")
#input the country boundary file
Country = vect("/Users/zhangfengqi/Desktop/Crop Failure/WorldCountries/WorldCountriesWithISO.shp")
#input files about
deForRisk = rast("./DataMap/Global_transition_potential.tif")
deForRisk = project(deForRisk, crs(Country))
HighDeFor = 1*(deForRisk > 0.5)
AbGBio = rast("./DataMap/AbGBio.tif")
AbGBio = project(AbGBio, crs(Country))
BGBio = rast("./DataMap/BGBio.tif")
BGBio = project(BGBio, crs(Country))
KBA_VNM
KBA_VNM = vect("./DataMap/Vietnam_KBA/Vietnam_KBA.shp")
KBA_VNM
VNM = Country[Country$ISO3 == "VNM",]
deForRisk_VNM = crop(deForRisk, VNM, mask = T)
AbGBio_VNM =crop(AbGBio, VNM, mask = T)
BGBio_VNM = crop(BGBio, VNM, mask = T)
plot(deForRisk_VNM, main = "Deforest Risk (VNM)")
plot(AbGBio_VNM, main = "Above Ground Biomass (VNM)")
plot(BGBio_VNM, main = "Below Ground Biomass (VNM)")
plot(deForRisk_VNM, main = "Deforest Risk (VNM)")
plot(AbGBio_VNM, main = "Above Ground Biomass (VNM)")
plot(BGBio_VNM, main = "Below Ground Biomass (VNM)")
BGBio_VNM
plot(KBA_VNM)
plot(VNM)
plot(KBA_VNM, add = T, col = 'green')
plot(VNM, main = "KBA (VNM)")
?project
KBA_VNM = project(KBA_VNM, crs(Country))
ext(KBA_VNM) = ext(VNM)
ext(VNM)
ext(KBA_VNM)
ext(KBA_VNM) = ext(VNM)
?extend
KBA_VNM = crop(KBA_VNM, VNM, mask = T)
KBA_VNM = crop(KBA_VNM, VNM)
KBA_VNM
KBA_VNM = vect("./DataMap/Vietnam_KBA/Vietnam_KBA.shp")
KBA_VNM = project(KBA_VNM, crs(Country))
KBA_VNM
ext(VNM)
as.vector(ext(VNM))
ext(KBA_VNM) = as.vector(ext(VNM))
KBA_VNM
?resample
as.vector(ext(VNM))
as.vector(ext(VNM))
?as.vector
base::as.vector(ext(VNM))
is.vector(as.vector(ext(VNM)))
test = c(1,2,3,4)
test
c(ext(VNM))
test = vector()
test
test = c(test, as.vector(ext(VNM)))
test
test = vector()
test = c(test, 1, 2)
test
ext(VNM)
ext(KBA_VNM) = as.vector(ext(VNM))
?ext
ext(KBA_VNM) = ext(VNM)
ext(VNM)
?extent
ext(KBA_VNM) <= ext(VNM)
ext(KBA_VNM) <- ext(VNM)
ext(KBA_VNM) = c(1,2,3,4)
ext(KBA_VNM)
test = mask(KBA_VNM, VNM)
test
KBA_VNM
plot(VNM, main = "KBA (VNM)")
plot(KBA_VNM, add = T, col = 'green')
plot(VNM, main = "KBA (VNM)")
plot(KBA_VNM, add = T, col = 'green')
VNM
AbGBio_VNM
KBA_VNM = vect("./DataMap/Vietnam_KBA/Vietnam_KBA.shp")
KBA_VNM = project(KBA_VNM, crs(Country))
plot(VNM, main = "KBA (VNM)")
plot(KBA_VNM, add = T, col = 'green')
library(rgdal)
library(sp)
library(sf)
library(terra)
#set the working directory
setwd("/Users/zhangfengqi/Desktop/NUS/BL5323/FinalProject/BL5323")
#input the country boundary file
Country = vect("./DataMap//WorldCountries/WorldCountriesWithISO.shp")
VNM = Country[Country$ISO3 == "VNM",]
#input files about
deForRisk = rast("./DataMap/Global_transition_potential.tif")
#input files about
deForRisk = rast("./DataMap/Global_transition_potential.tif")
deForRisk = project(deForRisk, crs(Country))
AbGBio = rast("./DataMap/AbGBio.tif")
AbGBio = project(AbGBio, crs(Country))
BGBio = rast("./DataMap/BGBio.tif")
BGBio = project(BGBio, crs(Country))
KBA_VNM = vect("./DataMap/Vietnam_KBA/Vietnam_KBA.shp")
KBA_VNM = project(KBA_VNM, crs(Country))
ext(KBA_VNM) = ext(VNM)
deForRisk_VNM = crop(deForRisk, VNM, mask = T)
AbGBio_VNM = crop(AbGBio, VNM, mask = T)
BGBio_VNM = crop(BGBio, VNM, mask = T)
plot(deForRisk_VNM, main = "Deforest Risk (VNM)")
plot(AbGBio_VNM, main = "Above Ground Biomass (VNM)")
plot(BGBio_VNM, main = "Below Ground Biomass (VNM)")
plot(VNM, main = "KBA (VNM)")
plot(KBA_VNM, add = T, col = 'green')
writeRaster(deForRisk_VNM, "./DataMap/deForRisk_VNM.tif")
writeRaster(AbGBio_VNM, "./DataMap/AbGBio_VNM.tif")
writeRaster(BGBio_VNM, "./DataMap/BGBio_VNM.tif")
